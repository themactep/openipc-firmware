#!/bin/sh

motors_app=$(which motors)
gpio_motor_h=$(fw_printenv -n gpio_motor_h)
gpio_motor_v=$(fw_printenv -n gpio_motor_v)
motor_h_maxstep=$(fw_printenv -n motor_maxstep_h)
motor_v_maxstep=$(fw_printenv -n motor_maxstep_v)

die() {
	echo -e "$1"
	exit ${2:-1}
}

check_module_loaded() {
	for module in "$@"; do
		grep -qE "^$module" /proc/modules && die "Module $module already loaded." 0
	done
}

set_motor_phases() {
	[ "$(echo $2 | wc -w)" -lt 4 ] && die "Missing phase for ${1}motor"

	local i=1
	for gpio in $2; do
		eval "${1}st${i}=$gpio"
		i=$((i + 1))
	done
}

rehome_motors() {
	motors -r > /dev/null 2>&1 &
}

start() {
	echo -n "Starting motors: "

	# Do not double load module
	check_module_loaded motor sample_motor

	# Check if motors are supported
	[ -z "$motors_app" ] && die "Disabled\n\tNo motors app found"
	[ -z "$gpio_motor_h" ] && die "Disabled\n\tPan motor GPIO are not set"
	[ -z "$gpio_motor_v" ] && die "Disabled\n\tTilt motor GPIO are not set"
	[ -z "$motor_h_maxstep" ] && die "Disabled\n\tPan motor Steps are not set"
	[ -z "$motor_v_maxstep" ] && die "Disabled\n\tTilt motor Steps are not set"

	# Set GPIO per motor phase
	set_motor_phases "h" "$gpio_motor_h"
	set_motor_phases "v" "$gpio_motor_v"

	# Load module with parameters
	modprobe motor hmaxstep=$motor_h_maxstep vmaxstep=$motor_v_maxstep \
		hst1=$hst1 hst2=$hst2 hst3=$hst3 hst4=$hst4 \
		vst1=$vst1 vst2=$vst2 vst3=$vst3 vst4=$vst4 \
		|| die "Failed to load motor module"

	echo "OK"

	# Set motors zero position unless disabled
	[ "true" != "$(fw_printenv -n disable_homing)" ] && rehome_motors
}

stop() {
	echo -n "Stopping motors: "
	# FIXME: motor.ko crashes on upload
	# rmmod motor || die "Failed to unload motor module."
	echo "OK"
}

case "$1" in
	start | stop)
		$1
		;;
	restart | reload)
		stop
		sleep 1
		start
		;;
	*)
		die "Usage: $0 {start|stop|restart|reload}"
		;;
esac

exit 0
