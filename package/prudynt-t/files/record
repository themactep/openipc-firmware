#!/bin/sh

. /sbin/common

pidof -o $$ record > /dev/null && quit "is already running"

RECORD_FLAG="/tmp/record.$$"

trap 'rm -f /tmp/record.*; exit' INT TERM EXIT

get_free_space() {
	available_space=$(df -k "$record_mount" | sed 1d | tr -d '\n' | awk 'END{print $4}') # in KiB
	log "Space available: $available_space KiB"
}

get_occupied_space() {
        local root=$(parse_target "$record_mount/${record_filename//\/%*}")
        occupied_space=$(du -s "$root" | awk '{print $1}') # in KiB
	log "Space occupied: $occupied_space KiB"
}

# "parameter" "default"
read_config() {
	sed -nE "s/^.*$1\s*[:=]\s*\"?([^\"]+)\"?;.*$/\1/p" /etc/prudynt.cfg | head -1
	[ -z "$_" ] || echo "$2"
}

# "default"
read_fps() {
	logcat | grep "fps" | head -1 | awk -F '[=,]' '{print $2}'
	[ -z "$_" ] || echo "$1"
}

# "parameter" "default"
read_size() {
	logcat | grep "VBMCreatePool()-${stream_number}: w=" | head -1 | awk -F '[= ]' "{print \$$1}"
	[ -z "$_" ] || echo "$2"
}

has_files() {
	[ "$(find "$1" -type f | wc -l)" -gt 0 ]
}

show_help() {
	log "Usage: $0 [<params>]
Where params are:
  -u <string>  RTSP username
  -p <string>  RTSP password
  -c <int>     RTSP stream number
  -h <int>     Frame height
  -w <int>     Frame width
  -f <int>     Frames per second
  -t <int>     Duration in seconds
  -v <str>     Record video format
  -m <path>    Mount point for storing files
  -n <string>  File name template (supports strftime format)
  -d <int>     Maximum disk usage, GiB
  -x           One-time run
"
}

hesitate() {
	log "$1"
	sleep 5
	exit 0
}

parse_target() {
	echo "$1" | sed "s/%hostname/$(hostname -s)/g"
}

RECORD_WEBUI_CONF=/etc/webui/record.conf
if [ -f $RECORD_WEBUI_CONF ]; then
	cat $RECORD_WEBUI_CONF
	. $RECORD_WEBUI_CONF
else
	[ "${#1}" -eq 0 ] && die "Config file $RECORD_WEBUI_CONF not found"
fi

while getopts "c:d:f:h:m:n:p:t:u:v:w:xz:" flag; do
	case "$flag" in
		c) stream_number=$OPTARG ;;
		d) record_limit=$OPTARG ;;
		f) stream_fps=$OPTARG ;;
		h) stream_height=$OPTARG ;;
		m) record_mount=$OPTARG ;;
		n) record_filename=$OPTARG ;;
		p) rtsp_password=$OPTARG ;;
		t) record_duration=$OPTARG ;;
		u) rtsp_username=$OPTARG ;;
		v) record_videofmt=$OPTARG ;;
		w) stream_width=$OPTARG ;;
		x) one_time="true" ;;
		*) show_help && exit ;;
	esac
done
shift "$((OPTIND - 1))"

record_mount=${record_mount%/}

[ -z "$record_mount"     ] && hesitate "Mountpoint record_mount is not set"
mountpoint "$record_mount" || hesitate "Mountpoint $record_mount is not mounted"
[ -w "$record_mount"     ] || hesitate "Mountpoint $record_mount is not writable"
[ -z "$record_duration"  ] && record_duration=10
[ -z "$record_filename"  ] && record_filename="%hostname/%Y/%m/%d/%H-%M-%S"
[ -z "$record_videofmt"  ] && record_videofmt="mp4"
rtsp_username=$(read_config "username" "thingino")
rtsp_password=$(read_config "password" "thingino")
[ -z "$stream_number"    ] && stream_number=0
# FIXME: based on default stream endpoint name, won't work on custom endpoints
stream_endpoint="ch$stream_number"
[ -z "$stream_fps"       ] && stream_fps=$(read_fps "25")
[ -z "$stream_height"    ] && stream_height=$(read_size "7" "1080")
[ -z "$stream_width"     ] && stream_width=$(read_size "5" "1920")

log "
stream_number: $stream_number
stream_endpoint: $stream_endpoint
stream_fps: $stream_fps
stream_height: $stream_height
stream_width: $stream_width
"

[ -z "$stream_number"   ] && die "Cannot determine stream humber"
[ -z "$stream_endpoint" ] && die "Cannot determine stream endpoint"
[ -z "$stream_fps"      ] && die "Cannot determine stream fps"
[ -z "$stream_height"   ] && die "Cannot determine stream height"
[ -z "$stream_width"    ] && die "Cannot determine stream width"

case "$record_videofmt" in
	avi) vformat="-i" ;;
	mov) vformat="-q -y -H" ;;
	mp4) vformat="-4 -y -H" ;;
	  *) die "Unknown video format $record_videofmt"
esac

touch $RECORD_FLAG

# FIXME: disable LED until LEDD is ready
#if [ -n "$record_led" ]; then
#	record_led_pin=$(fw_printenv -n $record_led | sed s/[^0-9]//g)
#	if [ -n "$record_led_pin" ]; then
#		LEDD_FLAG="/run/ledd/$record_led_pin"
#		echo "${record_blink:-1}" > $LEDD_FLAG
#	fi
#fi

record_limit_kb=$((record_limit * 1024 * 1024)) # GiB to KiB
required_space=$((120 * record_duration)) # KiB

while :; do
	[ -f $RECORD_FLAG ] || break

	target_template=$(parse_target "$record_mount/$record_filename.$record_videofmt")
	parsed_target=$(date +"$target_template")
	parsed_target_path=$(dirname "$parsed_target")
	if [ ! -d "$parsed_target_path" ]; then
		log "Making directory $parsed_target_path"
		mkdir -p "$parsed_target_path" || die "Cannot create directory $parsed_target_path"
	fi

	get_free_space
	get_occupied_space
	log "Space limit: $record_limit_kb KiB"
	log "Space required: $required_space KiB"
	if [ "$available_space" -le "$required_space" ]; then
		while [ "$available_space" -le "$required_space" ] || [ "$((occupied_space + required_space))" -gt "$record_limit_kb" ]; do
			oldest_file="$(find "$record_mount" -type f -exec ls -ltr {} + | head -n1 | awk '{print $9}')"
			oldest_file_dir="$(dirname $oldest_file)"
			rm -v "$oldest_file"
			[ -z "$(ls -A1 "$oldest_file_dir")" ] && rm -rv "$oldest_file_dir"

			get_free_space
			get_occupied_space
			has_files "$record_mount" || die "$record_mount is empty yet no space!"
		done
	fi

	log "Running openRTSP -u $rtsp_username $rtsp_password -w $stream_width -h $stream_height -f $stream_fps -d $record_duration $vformat -b 1048576 -t rtsp://127.0.0.1/$stream_endpoint  > $parsed_target"
	openRTSP -u $rtsp_username $rtsp_password -w $stream_width -h $stream_height -f $stream_fps \
		-d $record_duration $vformat -b 1048576 -t rtsp://127.0.0.1/$stream_endpoint > $parsed_target 2> /dev/null

	[ "true" = "$one_time" ] && rm $RECORD_FLAG
done

log "Cannot find recording flag $RECORD_FLAG"
[ -n "$LEDD_FLAG" ] && [ -f "$LEDD_FLAG" ] && rm $LEDD_FLAG
log "Exit"

exit 0
