#!/bin/sh

. /etc/init.d/rc.common

ROOT_PW_ENV="root_pw_hash"
SHADOW_PATH="/etc/shadow"
ROOT_SSH_ENV="ssh_authorized_keys"
KEYFILE_PATH="/root/.ssh/authorized_keys"

root_pw_saved=""
root_pw_cur=""
root_ssh_saved=""
root_ssh_cur=""

load_saved_creds() {
	root_ssh_saved="$(fw_printenv -n ${ROOT_SSH_ENV})"
	root_pw_saved="$(fw_printenv -n ${ROOT_PW_ENV})"
	root_pw_cur="$(grep '^root:' "${SHADOW_PATH}" | head -1 | cut -d ':' -f 2 | base64 | tr -d '\n')"
	if [ -f "${KEYFILE_PATH}" ] ; then
		root_ssh_cur="$(grep '[A-Za-z0-9]' "${KEYFILE_PATH}" | gzip | base64 | tr -d '\n')"
	fi
}

save_root_password() {
	fw_setenv ${ROOT_PW_ENV} "${root_pw_cur}"
	log "Saved root password." &
}

save_root_sshkey() {
	fw_setenv ${ROOT_SSH_ENV} "${root_ssh_cur}"
	log "Saved root authorized ssh keys." &
}

restore_root_password(){
	if [ -n "${root_pw_saved}" ] ; then
 		root_pw_data=$(echo "${root_pw_saved}" | base64 -d | grep '[A-Za-z0-9]' | head -1 | sed -e 's/^root://' -e 's/:.*//' )
		if [ -n "${root_pw_data}" ] ; then
			tmp_shadow=$(mktemp -p /tmp)
			echo "root:${root_pw_data}:::::::" > "${tmp_shadow}"
			grep -v '^root:' "${SHADOW_PATH}" >> "${tmp_shadow}"
			mv -f "${SHADOW_PATH}" "${SHADOW_PATH}-"
			mv -f "${tmp_shadow}" "${SHADOW_PATH}"
			log "Root password restored." &
		fi
	fi
}

restore_root_sshkey() {
	if [ -n "${root_ssh_saved}" ] ; then
		tmp_keys=$(mktemp -p /root/.ssh)
  		echo "$root_ssh_saved" | base64 -d | gunzip >> "${tmp_keys}"
		grep -Eq "ssh-rsa|ssh-ed25519|ecdsa-sha" "${tmp_keys}" && mv -v "${tmp_keys}" "${KEYFILE_PATH}"
		log "SSH Key restored." &
	fi
}


load_saved_creds
case "$1" in
	start)
		if [ -s "${KEYFILE_PATH}" ]; then
			if [ "x$root_ssh_saved" != "x${root_ssh_cur}" ]; then
				save_root_sshkey
			fi
		else
			if [ -n "${root_ssh_saved}" ] ; then
				restore_root_sshkey
			fi
		fi

		if [ -f "${SHADOW_PATH}-" ] ; then
			if [ -z "${root_pw_saved}" ] || [ "x${root_pw_saved}" != "x${root_pw_cur}" ]; then
				save_root_password
			fi
		else
			if [ -n "${root_ssh_saved}" ] ; then
				restore_root_password
			fi
		fi

		;;
	status | stop | restart)
		true
		;;
	*)
		echo "Usage: $0 {start|stop|restart|status}"
		exit 1
		;;
esac

exit 0
