#!/bin/sh

if [ "$0" = "-sh" ]; then
	echo "Do not run directly!"
	return
fi

debug=$(fw_printenv -n debug)

DAEMON=${DAEMON:-$0}
DAEMON_ARGS=${DAEMON_ARGS:-}
DAEMON_PATH="/bin"
DAEMON_SHORT=$(basename "${DAEMON%% *}" | sed -r 's/^[FKS]\d{2}//')
DAEMON_FULL="$(which $DAEMON_SHORT)"
PIDFILE="/run/$DAEMON_SHORT.pid"

[ -r "/etc/default/$DAEMON_SHORT" ] && . "/etc/default/$DAEMON_SHORT"

check_result() {
	local res=$?
#	is_debug_mode && return
	[ "$res" -eq 0 ] && ok || fail
}

die() {
	if [ -n "$1" ]; then
		echo "$1" | log
		echo_c 124 "$1"
	fi
	exit 1
}

ensure_dir() {
	[ -d "$1" ] || mkdir -p "$1"
}

ensure_file() {
	ensure_dir "$(dirname $1)"
	[ -f "$1" ] || touch "$1"
}

fail() {
	echo_c 124 "FAIL"
	echo "FAIL" | log
}

get_vars_from_env() {
	local tmpfile=$(mktemp)
	fw_printenv | grep ^${1}_ > $tmpfile
	. $tmpfile
	rm $tmpfile
}

gpio_control() {
	gpio_name="$1"
	gpio_power="$(fw_printenv -n "$gpio_name")"

	if [ -z "$gpio_power" ]; then
		return 1  # no value
	fi

	num=${gpio_power%[oO]}
	state=${gpio_power#$num}

	case "$state" in
		O)
			gpio_cmd="high"
			;;
		o)
			gpio_cmd="low"
			;;
		*)
			warn "Invalid state for GPIO $gpio_name: $state"
			return 2  # invalid state
			;;
	esac

	info "Set GPIO $num $gpio_cmd"
	if gpio $gpio_cmd $num 2>&1 | log; then
		return 0  # success
	else
		warn "Failed to set GPIO $num $gpio_cmd"
		return 3  # failure
	fi
}

iface_default() {
	ipv4_iface=$(ip -4 r | sed -nE '/default/s/.+dev (\w+).+?/\1/p' | head -n 1)
	[ -n "$ipv4_iface" ] && echo "$ipv4_iface" || ip -6 r | sed -nE '/default/s/.+dev (\w+).+?/\1/p' | head -n 1
}

iface_exists() {
	iface="$1"

	if [ -z "$iface" ]; then
		echo "Interface parameter missing." 2>&1 | log
		return 1
	fi

	if ip link show $iface &> /dev/null; then
		if [ "eth0" = $iface ] && ! is_gateway_reachable; then
			echo "eth0 has no local connection" 2>&1 | log
			return 1
		fi

		echo "Interface '$iface' exists." 2>&1 | log
		return 0
	else
		echo "Interface '$iface' does not exist." 2>&1 | log
		return 1
	fi
}

indent_output() {
	awk '{print " "$0}'
}

info() {
	echo "$1" | log
	is_debug_mode && echo_c 66 "$1"
}

is_boot_complete() {
	[ "true" = "$(fw_printenv -n boot_complete)" ]
}

is_debug_mode() {
	[ $((0 + debug)) -gt 0 ] || [ "true" = "$debug" ]
}

is_streamer_disabled() {
	[ "true" = "$(fw_printenv -n disable_streamer)" ] || [ -f /run/portal_mode ]
}

is_streamer_running() {
	pidof prudynt > /dev/null
}

is_gateway_reachable() {
	ping -c 1 -W 1 -I $iface $(ip -4 route | grep $iface | grep default | awk '{print $3}') > /dev/null 2>&1 || \
	ping -6 -c 1 -W 1 -I $iface $(ip -6 route | grep $iface | grep default | awk '{print $3}') > /dev/null 2>&1
}

is_usb_console() {
	[ "true" = "$(fw_printenv -n usb_console)" ]
}

log() {
	logger -p daemon.info -t ${DAEMON_SHORT}[$$] <&0
}

ok() {
	echo_c 70 "OK"
	echo "OK" | log
}

play_sound() {
	iac -f /usr/share/sounds/$1 | log
}

print_release() {
	[ -f /etc/os-release ] || return
	. /etc/os-release
	echo_c 208 "Thingino $IMAGE_ID [$BUILD_ID]\n"
	echo "Thingino $IMAGE_ID [$BUILD_ID]" | log
}

quit() {
	if [ -n "$1" ]; then
		echo "$1" | log
		echo_c 66 "$1"
	fi
	exit 0
}

run() {
	echo "$*" | log
	is_debug_mode && echo_c 144 "$*"
	eval "$*" 2>&1 | log
}

start_daemon() {
	local command="${COMMAND:-$DAEMON_FULL}"
	[ -n "$DAEMON_ARGS" ] && command="$command $DAEMON_ARGS"
	command="${command/ / -- }"
	run "start-stop-daemon -b -S -x $command"
	check_result
}

start_daemon_with_pid() {
	local command="${COMMAND:-$DAEMON_FULL}"
	[ -n "$DAEMON_ARGS" ] && command="$command $DAEMON_ARGS"
	command="${command/ / -- }"
	run "start-stop-daemon -b -m -S -p $PIDFILE -x $command"
	check_result
}

starting() {
	echo "Starting ${1:-$DAEMON_SHORT}" | log
	echo -n "Starting ${1:-$DAEMON_SHORT}"
	is_debug_mode && echo " ..." || echo -n ": "
}

stop_daemon() {
	#FIXME do we need -s KILL?
	run "start-stop-daemon -K -n $DAEMON_SHORT"
	check_result
}

kill_daemon() {
	run "start-stop-daemon -K -s SIGKILL -n $DAEMON_SHORT"
	check_result
}

stop_daemon_process() {
	start-stop-daemon -K -x $DAEMON_FULL 2>&1 | log
	check_result
}

stop_daemon_with_pid() {
	run "start-stop-daemon -K -p $PIDFILE"
	check_result
	[ -f $PIDFILE ] && rm -f $PIDFILE
}

stopping() {
	echo "Stopping ${1:-$DAEMON_SHORT}" | log
	echo -n "Stopping ${1:-$DAEMON_SHORT}"
	is_debug_mode && echo " ..." || echo -n ": "
}

warn() {
	echo_c 166 "$1"
	echo "$1" | log
}

set_gpio() {
	info "Set GPIO $1 to F$2 D$3"
	gpio-diag $1 func $2 drive $3
}
