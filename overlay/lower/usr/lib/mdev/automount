#!/bin/sh

if [ -z "$MDEV" ]; then
	echo "No device name to mount!"
	exit 1
fi

devicenode="/dev/$MDEV"
mountpoint="/mnt/$MDEV"

run="$mountpoint/run.sh"
run_once="$mountpoint/runonce.sh"
run_once_flag="${run_once/.sh/.done}"

log() {
	logger -p daemon.info -t automount[$$] -s "$1"
}

cleanup() {
	if [ -d "$mountpoint" ]; then
		if rm -r "$mountpoint"; then
			log "Removed $mountpoint mountpoint."
		else
			log "Failed to remove $mountpoint mountpoint."
		fi
	else
		log "No $mountpoint mountpoint found."
	fi
}

do_fsck() {
	res=$(fsck -V -y "$devicenode" 2>&1)
	fsck_status=$?

	echo "$res" | while IFS= read -r line; do
		log "$line"
	done

	if [ "$fsck_status" -eq 0 ]; then
		log "fsck check succeeded on $devicenode"
	else
		log "fsck check failed on $devicenode."

		if [ "$fsck_status" -eq 8 ] || [ "$fsck_status" -eq 16 ] || [ "$fsck_status" -eq 32 ] || [ "$fsck_status" -eq 128 ]; then
			log "Critical fsck error with exit status $fsck_status, mounting process aborted."
			return 1
		else
			log "Non-critical fsck error with exit status $fsck_status, continuing."
		fi
	fi
}

do_mount() {
	if mkdir -p "$mountpoint"; then
		log "Created $mountpoint mountpoint."
	else
		log "Cannot create $mountpoint mountpoint."
		return 1
	fi

#	do_fsck || return 1

	if mount -t auto -o noatime,sync "$devicenode" "$mountpoint"; then
		log "Mounted $devicenode to $mountpoint mountpoint."
	else
		log "Failed to mount $devicenode to $mountpoint mountpoint."
		cleanup
		return 1
	fi

	[ -f "$run_once" ] && do_run_once
	[ -f "$run" ] && do_run_always
}

do_umount() {
	stop_recording

	if grep -qs "^$devicenode " /proc/mounts; then
		if umount "$mountpoint"; then
			log "Unmounted $mountpoint mountpoint."
		else
			log "Failed to unmount $mountpoint mountpoint."
		fi
	else
		log "$devicenode is not mounted."
	fi

	cleanup
}

do_run_always() {
	if sh $run; then
		log "Executed $run script."
	else
		log "Failed to execute $run script."
	fi
}

do_run_once() {
	if [ -f "$run_once_flag" ]; then
		log "Stop flag $run_once_flag exists."
		return 1
	fi

	if sh "$run_once"; then
		touch "$run_once_flag"
		log "Executed $run_once script."
	else
		log "Failed to execute $run_once script."
	fi
}

stop_recording() {
	while pidof openRTSP > /dev/null; do
		killall openRTSP
	done
}

case "$ACTION" in
	add | "")
		do_umount
		do_mount
		;;
	remove)
		do_umount
		;;
esac

exit 0
