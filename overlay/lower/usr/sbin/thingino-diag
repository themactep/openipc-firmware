#!/bin/sh

. /sbin/common

show_help() {
	echo -e "Thingino Diagnostics Script\n"
	echo -e "Generate diagnostics log shared via termbin.com\n"
	echo "Usage: $0 [-l]"
	echo "Where:"
	echo "  -l    Save the log to a local file instead."
	exit 0
}

header() {
	local border="=============================================="
	local width=46
	local text="$1"
	local text_length=${#text}
	local padding=$(((width - text_length - 2) / 2))
	local left_border=${border:0:padding}
	local right_border=${border:0:(width - padding - text_length - 2)}
	echo -e "$border\n$left_border $text $right_border\n$border"
}

infocat() {
	[ -f "$1" ] || return
	[ -n "$2" ] && header "$2"
	cat $1
}

inforun() {
	[ -n "$2" ] && header "$2"
	eval $1
}

local_file=""
while getopts ":lh" opt; do
	case $opt in
		l)
			local_file="yes"
			;;
		h)
			show_help
			;;
		\?)
			echo_c 160 "Invalid option: -$OPTARG" >&2
			show_help
			;;
	esac
done

if is_interactive_shell; then
	echo_c 208 "Thingino Diagnostics"
	[ -z "$local_file" ] && echo_c 11 "This script requires network access."
	echo -e "\nThis script generates a log file for sharing with developers \
for diagnostic issues.\nThe log may contain sensitive or personal information, \
make sure to review it before sending the link!\nWe use termbin to share the log. \
Please review their use policy at https://www.termbin.com/\n"
	read -p "Do you wish to proceed? (yes/no): " response
	if [ "yes" != "$response" ]; then
		echo_c 160 "Operation aborted by the user."
		exit 1
	fi
fi

if [ -n "$local_file" ]; then
	output_file="/tmp/thingino-diag-$(head /dev/urandom | tr -dc A-Za-z0-9 | head -c 4).log"
else
	output_file=$(mktemp)
fi

{
	inforun "date"
	inforun "uptime"
	inforun "uname -a"
	inforun "grep -a \"Thingino\" /dev/mtd0"
	infocat "/etc/os-release" "THINGINO"
	inforun "soc;soc -w" "SOC"
	inforun "dmesg" "DMESG"
	inforun "logread" "SYSLOG"
	inforun "logcat" "LOGCAT"
	inforun "ps" "PS"
	inforun "df -h" "DF"
	inforun "ipcs" "IPC"
	inforun "lsmod" "KMOD"

	header "KMOD-2"
	for file in /etc/modules.d/*; do echo "== $file =="; cat "$file"; done

	inforun "lsusb" "USB"
	inforun "free -h" "MEMORY"
	inforun "lsof" "LSOF"
	inforun "mount" "MOUNT"
	inforun "gpio list" "GPIO"

	header "ENV"
	fw_printenv | awk -F'=' '{if (/ethaddr|gatewayip|ipaddr|root_pw_hash|pwbackup|serverip|ssh_authorized_keys|sshkey|wlanmac|wlanpass|wg_dns|wg_address|wg_endpoint|wg_peerpub|wg_peerpsk|wg_allowed/) print $1 "=REDACTED"; else print}' | sort

	infocat "/proc/cmdline" "CMDLINE"
	infocat "/proc/jz/clock/clocks" "CLOCKS"
	infocat "/proc/jz/isp/isp-fs" "isp-fs"
	infocat "/proc/jz/isp/isp-m0" "isp-m0"
	infocat "/proc/jz/isp/isp_info" "isp_info"
	infocat "/tmp/continuous_mem_info" "libimp meminfo"

	inforun "sensor -a" "sensor"

	header "streamer"
	awk -F':' '{if (/password/) print $1 " REDACTED"; else print}' /etc/prudynt.cfg

	infocat "/etc/crontabs/root" "crontab"
} > "$output_file"

if [ -z "$local_file" ]; then
	url=$(cat "$output_file" | send2termbin)
	rm -f "$output_file"

	[ -z "$url" ] && die "\nThere was an error."

	echo -e "\nYour diagnostics log link:\n$url"
else
	echo "Diagnostics log saved locally at $output_file"
fi

exit 0
