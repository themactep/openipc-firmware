#!/bin/sh

plugin="mqtt"

. /sbin/common-plugins

show_help() {
	echo "Usage: $0 [-t topic] [-m message] [-s] [-v] [-h]
  -t topic    MQTT topic.
  -m message  Message playload.
  -s          Send a snapshot.
  -v          Verbose output.
  -h          Show this help.
"
	quit_clean 0
}

# override config values with command line arguments
while getopts m:st:vh flag; do
	case "$flag" in
		m) mqtt_message=$OPTARG ;;
		s) mqtt_send_snap="true" ;;
		t) mqtt_topic=$OPTARG ;;
		v) verbose="true" ;;
		h | *) show_help ;;
	esac
done

[ "false" = "$mqtt_enabled" ] && die "Sending to MQTT broker is disabled."
# validate mandatory values
[ -z "$mqtt_host" ] && die "MQTT broker host not found in config"
[ -z "$mqtt_port" ] && die "MQTT broker port not found in config"
[ -z "$mqtt_topic" ] && die "MQTT topic not found"
[ -z "$mqtt_message" ] && die "MQTT message template not found"
[ "true" = "$mqtt_send_snap" ] && [ -z "$mqtt_snap_topic" ] && die "MQTT topic for sending snapshot not found in config"

# assign default values if not set
[ -z "$mqtt_client_id" ] && mqtt_client_id="$network_hostname"

# parse strftime templates
mqtt_message=$(date +"$mqtt_message")

build_cmd "mosquitto_pub -h $mqtt_host -p $mqtt_port -i $mqtt_client_id"
# MQTT credentials, if given
[ -n "$mqtt_username" ] && build_cmd "-u $mqtt_username"
[ -n "$mqtt_password" ] && build_cmd "-P $mqtt_password"
[ "true" = "$mqtt_socks5_enabled" ] && use_socks5

if [ "true" = "$mqtt_send_snap" ]; then
	attachment=$(mktemp -u /tmp/snapshot-XXXXXX).jpg
	clone_snapshot $attachment
	build_cmd "-t $mqtt_snap_topic -f \"$attachment\""
else
	build_cmd "-t $mqtt_topic -m \"$mqtt_message\""
fi
log_and_run "$command"

[ "true" = "$delete_tempfile" ] && [ -f "$attachment" ] && rm "$attachment"
[ "true" = "$verbose" ] && cat $LOG_FILE

quit_clean 0
