#!/bin/sh

PID=$$
LOCK_FILE="/run/process-${PID}.pid"
LOG_FILE=/tmp/webui.log
LOG_SIZE_LIMIT=50000

SOCKS5_CONFIG=/etc/webui/socks5.conf

curl_timeout=100

CURL="curl $curl_verbosity --connect-timeout $curl_timeout --max-time $curl_timeout"

build_cmd() {
	command="$command $1"
}

die() {
	log "$1"
	quit_clean ${2:-1}
}

log() {
	# poor man's logrotate
	if [ -f "$LOG_FILE" ] && [ "$(stat -c%s "$LOG_FILE")" -gt $LOG_SIZE_LIMIT ]; then
		# redundant, but calling log() from within log() is wrong!
		echo "$(date +"%F %T") [${PID}:${plugin}] Rotate log file" >> $LOG_FILE
		mv "$LOG_FILE" "${LOG_FILE}.1"
		echo "$(date +"%F %T") [${PID}:${plugin}] Log file rotated." >> $LOG_FILE
	fi
	echo "$(date +"%F %T") [${PID}:${plugin}] $1" >> $LOG_FILE
	echo "$(date +"%F %T") [${PID}:${plugin}] $1"
}

log_and_run() {
	log "$1" 34
	run "$1"
}

quit_clean() {
	if [ -f "$LOCK_FILE" ]; then
		log "Remove lock file $LOCK_FILE"
		rm "$LOCK_FILE"
	fi
	log "Exit [$1]."
	exit "$1"
}

run() {
	local r
	r=$(eval "$1" >> $LOG_FILE 2>&1)
	echo "RESULT: $r"
}

singleton() {
	log "Check lock file $LOCK_FILE"
	if [ -f "$LOCK_FILE" ] && ps | grep "^\s*\b$(cat "$LOCK_FILE")\b" > /dev/null; then
		log "Another instance running with PID $(cat $LOCK_FILE)."
		exit 1
	fi
	printf "%d\n" $PID > $LOCK_FILE
	log "Create lock file $LOCK_FILE"
}

use_socks5() {
	[ -f $SOCKS5_CONFIG ] || return
	. $SOCKS5_CONFIG
	build_cmd "--proxy-user $socks5_login:$socks5_password"
	build_cmd "--socks5-hostname $socks5_host:$socks5_port"
	#"--proxy socks5h://$socks5_login:$socks5_password@$socks5_host:$socks5_port"
}
