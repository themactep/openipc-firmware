#!/bin/sh

echo "Run as $0 $*"

KERNEL_MAGIC="27051956"
U_BOOT_MAGIC="06050403"
ROOTFS_MAGIC="68737173"
GITHUB_URL="https://github.com"
PAD="\t\t\t    "

workdir="/tmp/sysupgrade"
stage1app="sysupgrade"
stage2app="sysupgrade-stage2"
fw_file="$workdir/fw.bin"

self=$(realpath $0)
selfupdate="true"
bbapplets="echo flash_eraseall flashcp reboot sh sleep"
upgrade=""

bye() {
	die "\n\n\tMaybe next time..."
}

check_network() {
	curl -m 5 -I $1 >/dev/null 2>&1 && return
	red "No internet?\n"
	ip a
	exit 1
}

check_free_space() {
	local dl_size=$(curl -sIL $1 | awk '/Content-Length/{fs=$2}END{print fs}')
	local free_space=$(df -m /tmp | tail -1 | awk '{print $4}')
	local flash_size=$((0x$(awk '/^mtd6/{print $2}' /proc/mtd)))
	local offset="${2:-0}"
	dl_size=$((dl_size - offset))
	free_space=$((free_space * 1024 * 1024))
	[ "$dl_size" -gt "$free_space" ] && die "Not enough free space to download firmware: $dl_size > $free_space"
	[ "$dl_size" -gt "$flash_size" ] && die "Firmware is larger than flash chip: $dl_size > $flash_size"
}

cleanup() {
	say "Clean up temporary files."
	rm -rf $workdir
	exit 0
}

clone_app() {
	local target="$2"
	[ -z "$target" ] && target="$(basename $1)"
	if ! cp -vf "$1" "$workdir/$target"; then
		say "Error: Failed to copy $1 to $workdir/$target"
		cleanup
	fi
	chmod +x $workdir/$target
}

die() {
	red "$1"
	cleanup
	exit 1
}

# url file options
download() {
	local file="$2"
	[ -z "$file" ] && file="$fw_file"
	if ! curl -fL# --url "$1" -o "$file" $3; then
		return 1  # Return an error code instead of exiting
	fi
}

expand_bb() {
	echo "set up $1"
	ln -s $workdir/busybox $workdir/$1
}

handle_payload() {
	if [ "local" = "$upgrade" ]; then
		say "Upgrading from a provided file"
		if echo "$1" | grep -qE '^https?://'; then
			say "Download firmware from\n$1"
			check_free_space $1
			download $1 || die "Cannot download $1 to $fw_file"
		else
			[ -f "$fw_file" ] || die "Cannot find $fw_file"
		fi
	else
		say "Upgrading from GitHub"
		data=/etc/os-release
		profile=$(awk -F= '/^IMAGE_ID=/ {print $2}' $data)
		[ -z "$profile" ] && die "Building profile is not set in $data"

		gh_url="$GITHUB_URL/themactep/thingino-firmware"
		bin_url="$gh_url/releases/latest/download/thingino-$profile.bin"
		if [ "part" = "$upgrade" ]; then
			offset=327680
			bin_file="thingino-$profile-update.bin"
			sha_url="$gh_url/releases/latest/download/$bin_file.sha256sum"
		else
			offset=0
			bin_file="thingino-$profile.bin"
			sha_url="$gh_url/releases/latest/download/$bin_file.sha256sum"
		fi

		sha_file=$(basename $sha_url)

		check_free_space $bin_url $offset

		#\n- $bin_url\n- $sha_url"
		say "Downloading firmware from:\n$bin_url"
		download "$bin_url" "$bin_file" "-C $offset" || die "Cannot download firmware from specified URL."
		say "Downloading checksum from:\n$sha_url"
		download "$sha_url" "$sha_file" || die "Cannot download checksum file."

		say "Verifying downloaded file"
		sha256sum -c $sha_file || die "Checksum does not match!"

		rm $sha_file
		mv -v "$bin_file" "$fw_file" || die "Cannot move $bin_file to $fw_file"
	fi
}

flush_memory() {
	say "Sync changes"
	sync
	say "Drop caches"
	echo 3 > /proc/sys/vm/drop_caches
}

red() {
	echo -e "\e[38;5;160m$1\e[0m"
}

remove_snapshot() {
	say "Remove snapshot"
	rm -f /tmp/snapshot.jpg
}

say() {
	echo -e "$1"
}

show_help() {
	say "Usage: $0 [-x] [-f|-p|<file>|<URL>]
Where:
  -f      full upgrade with a binary from GitHub
  -p      partial upgrade with a binary from GitHub
  <file>  full or partial upgrade from a local file
  <URL>   full or partial upgrade from a URL
  -x      do not update the script
  -h      this help"
	exit 0
}

stop_services() {
	say "Stop services"
	for i in $(find /etc/init.d/ -name "[KS]*" -executable | sort -nr); do
		case "$(basename $i)" in
			K99watchdog | S36wireless | S38wpa_supplicant | S40network | S42wifiap | S42wireguard | S50dropbear)
				continue
				;;
			*)
				sh -c "$i stop"
				;;
		esac
	done
}

update_self() {
	local GH_DL_URL="https://raw.githubusercontent.com/themactep/thingino-firmware/refs/heads/master/overlay/lower/usr/sbin/"
	download "$GH_DL_URL$stage1app" "$workdir/$stage1app"
	chmod +x $workdir/$stage1app
	download "$GH_DL_URL$stage2app" "/sbin/$stage2app"
	chmod +x /sbin/$stage2app
}

# mandate virtual partitions
grep -q "mtd[56]" /proc/mtd || die "Please run 'fw_setenv enable_updates true' then reboot the camera. Re-run upgrade after reboot."

ORIGINAL_ARG="$@"
while getopts "bfhpx" flag; do
	case "$flag" in
		f)
			upgrade="full"
			url="$GITHUB_URL"
			;;
		p)
			upgrade="part"
			url="$GITHUB_URL"
			;;
		x)
			selfupdate="false"
			;;
		h | *)
			show_help
			;;
	esac
done
shift "$((OPTIND - 1))"

# work in $workdir
if [ ! -d $workdir ]; then
	say "Creating $workdir directory"
	mkdir -p $workdir || die "Cannot create $workdir directory"
fi

if [ -z "$upgrade" ]; then
	[ -z "$1" ] && show_help

	upgrade="local"
	if echo "$1" | grep -qE '^https?://'; then
		say "Upgrade from a remote file"
		url="$1"
	else
		say "Upgrade from a local file $fw_file"
		if [ -f "$fw_file" ]; then
			say "Found $fw_file"
		else
			ufile="$(realpath "$1")"
			[ -r "$ufile" ] || die "Cannot find file $ufile (from $(pwd))"
			say "Found $ufile"
			mv -v "$ufile" "$fw_file"
		fi
	fi
fi

cd $workdir || die "Cannot change directory to $workdir"

if [ "$(dirname $self)" != "$workdir" ]; then
	if [ "true" = "$selfupdate" ]; then
		say "Updating self"
		update_self
	else
		say "Skip self-update"
		cp $0 $workdir/$stage1app
	fi
	say "Re-running script from $workdir"
	exec $workdir/$stage1app $ORIGINAL_ARG
fi

if [ "full" = "$upgrade" ]; then
	clear
	red "
$PAD ____ _____ ___  ____
$PAD/ ___|_   _/ _ \|  _ \\
$PAD\___ \ | || | | | |_) |
$PAD ___) || || |_| |  __/
$PAD|____/ |_| \___/|_|
"
	say "\tYou have requested to perform a full firmware upgrade,"
	say "\twhich is a risky operation replacing the existing bootloader.\n"
	say "\tIn the event of an error, the camera will become inoperable,"
	say "\tand you will need to perform a recovery restore the system.\n"
	red "\tYou have ten seconds to cancel the upgrade by pressing Ctrl-C."
	red "\tIf you would like to continue now, press Enter."
	echo -en "\n\n\t    "

	trap bye 2 15
	i=10
	while [ $i -ge 0 ]; do
		echo -n "$i"
		[ "$i" -gt 0 ] && echo -n " .. "
		read -t 1 -n 1 keypress
		if [ $? -eq 0 ]; then
			if [ "$keypress" = "" ]; then
				break
			fi
		fi
		i=$((i-1))
	done
	clear
fi

trap cleanup 2 6 15

[ -n "$url" ] && check_network "$url"

handle_payload "$@"

case "$(xxd -l 4 -p $fw_file)" in
	"$U_BOOT_MAGIC") [ "$(stat -c%s $fw_file)" -le 262144 ] && mtd_dev="mtd0" || mtd_dev="mtd6" ;;
	"$KERNEL_MAGIC") mtd_dev="mtd5" ;;
	"$ROOTFS_MAGIC") die "We cannot flash only rootfs" ;;
	*) die "Unknown file" ;;
esac

stop_services
remove_snapshot
flush_memory

clone_app /bin/busybox
clone_app /sbin/$stage2app
for a in $bbapplets; do expand_bb $a; done

say "Switching to Stage 2.\n"
if ! PATH="/tmp/sysupgrade" exec $workdir/busybox sh $workdir/$stage2app "$fw_file" "$mtd_dev"; then
	red "Error: Failed to execute $workdir/$stage2app"
	cleanup
fi

# If succeeded, do not clean up
trap - INT TERM

exit 0
